<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://www.lindstromhenrik.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.lindstromhenrik.com/" rel="alternate" type="text/html" /><updated>2022-11-13T17:22:52+01:00</updated><id>https://www.lindstromhenrik.com/feed.xml</id><title type="html">a life in search</title><subtitle></subtitle><author><name>Henrik Lindström</name><email>lindstrom.henrik@gmail.com</email></author><entry><title type="html">Running Elasticsearch Curator as an AWS Lambda function</title><link href="https://www.lindstromhenrik.com/running-elasticsearch-curator-as-an-aws-lambda-function/" rel="alternate" type="text/html" title="Running Elasticsearch Curator as an AWS Lambda function" /><published>2018-06-24T00:00:00+02:00</published><updated>2018-06-24T00:00:00+02:00</updated><id>https://www.lindstromhenrik.com/running-elasticsearch-curator-as-an-aws-lambda-function</id><content type="html" xml:base="https://www.lindstromhenrik.com/running-elasticsearch-curator-as-an-aws-lambda-function/"><![CDATA[<p>AWS Lambda functions can be used to run the Elasticsearch Curator CLI in a <em>serverless</em> way. This can be very convenient as you don’t need <em>yet another server</em> in order to run your Curator jobs, especially if you are using an Elasticsearch cloud hosting service and don’t have any machines directly available.</p>

<h2 id="aws-lambda">AWS Lambda</h2>
<p><a href="https://aws.amazon.com/lambda/">AWS Lambda</a> is a serverless compute service that allows for the execution of event triggered units of code called <em>functions</em>. Lambda functions can be written in Java, nodejs, C# and Python and some common use cases are processing items as they are added to Kinesis queues or to S3 buckets. Another nice approach is to <em>cloudify</em> old fashioned cron-jobs using Lambda functions and <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/WhatIsCloudWatchEvents.html">CloudWatch Events</a> and since the price of running Lambda functions is based on execution time this is much cheaper than having an EC2 virtual machine running 24/7. The execution unit of Lambda functions are called <em>GB-seconds</em> and is calculated as the memory (GB) x execution time (seconds), if your function executes for 0,5 seconds using 0,128 GB of memory this will equal 0,064 GB seconds. Even better is that the first 400,000 GB seconds each month are free. Currently there is a maximum timeout of 300 seconds for a single execution of a function so Lambda functions are not suitable for long running tasks.</p>

<h2 id="elasticsearch-curator">Elasticsearch Curator</h2>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/5.x/about.html">Elasticsearch Curator</a> lets you manage your Elasticsearch indices and snapshots and is a handy tool for doing various maintanance tasks. It is a python library that can be used either by directly using the API or by using the CLI and specify tasks using <em>action files</em>. The Curator documentation contains several <a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/examples.html">examples</a> of action files doing varios tasks (<em>Note</em> that you can specify several actions in a file and that they will be executed in order).</p>

<h2 id="running-the-curator-cli-as-a-lambda-function">Running the Curator CLI as a Lambda function</h2>
<p>Using the Curator Python API in your Lambda Function is pretty straight forward but maybe you want to move existing Curator jobs that are using the the CLI and have actions specified in action files. To do this you can simply execute the Curator CLI from within your Lambda function:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">run</span><span class="p">(</span><span class="s">"curator.yml"</span><span class="p">,</span> <span class="s">"actions.yml"</span><span class="p">,</span> <span class="n">dry_run</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'DRY_RUN'</span><span class="p">,</span> <span class="bp">True</span><span class="p">))</span></code></pre></figure>

<p>Doing this and packaging the action file together with the Lambda function in the deploy will then allow you to setup functions running different Curator jobs. To simplify it even more I have created a small <a href="https://github.com/lindstromhenrik/lambda-curator"><em>lambda-curator</em></a> package on github with a full implementation, including packaging and deployment of the function.</p>

<h2 id="integration-with-aws-elasticsearch">Integration with AWS Elasticsearch</h2>
<p>If you are running your Elasticsearch cluster using AWS Elasticsearch you get another nice feature straight out of the box. The Curator requests will automatically be signed by the IAM role of your Lambda function (when having set <em>aws_sign_request</em> in the curator.yml)  and will therefore be authenticated against your cluster (using the IAM).</p>]]></content><author><name>Henrik Lindström</name><email>lindstrom.henrik@gmail.com</email></author><category term="Elasticsearch" /><category term="Elasticsearch" /><category term="Curator" /><summary type="html"><![CDATA[AWS Lambda functions can be used to run the Elasticsearch Curator CLI in a serverless way...]]></summary></entry><entry><title type="html">Facet filtering with EPiServer Find</title><link href="https://www.lindstromhenrik.com/facet-filtering-with-episerver-find/" rel="alternate" type="text/html" title="Facet filtering with EPiServer Find" /><published>2016-06-02T00:00:00+02:00</published><updated>2016-06-02T00:00:00+02:00</updated><id>https://www.lindstromhenrik.com/facet-filtering-with-episerver-find</id><content type="html" xml:base="https://www.lindstromhenrik.com/facet-filtering-with-episerver-find/"><![CDATA[<p><span>Sometimes you want to have a facet calculated on just a subset of the result or have multiple facets each being calculated on a different subset of the result. To enable this I’ve created a small extension project to the Episerver Find API, <a href="https://github.com/x2find/FacetFilter2Find">FacetFilter2Find</a>, that enables passing a filter to TermsFacetFor(…) that will filter the result set when calculating the facet.</span></p>

<h2>How to use the FacetFilter2Find extension</h2>

<p><span>To use it you simply pass a filter when requesting the facet:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">result</span> <span class="p">=</span> <span class="n">client</span><span class="p">.</span><span class="n">Search</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Document</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;()</span>
                        <span class="p">.</span><span class="nf">TermsFacetFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Category</span><span class="p">,</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Type</span><span class="p">.</span><span class="nf">Match</span><span class="p">(</span><span class="s">"pdf"</span><span class="p">))</span>
                        <span class="p">.</span><span class="nf">GetResult</span><span class="p">();</span></code></pre></figure>

<p><span>and fetch the resulting facet:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">facet</span> <span class="p">=</span> <span class="n">result</span><span class="p">.</span><span class="nf">TermsFacetFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Category</span><span class="p">);</span></code></pre></figure>

<p><span>In order to specify multiple facets on a single field, each having a different filter, one must specify a custom name:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">result</span> <span class="p">=</span> <span class="n">client</span><span class="p">.</span><span class="n">Search</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Document</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;()</span>
                        <span class="p">.</span><span class="nf">TermsFacetFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Category</span><span class="p">,</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Type</span><span class="p">.</span><span class="nf">Match</span><span class="p">(</span><span class="s">"pdf"</span><span class="p">),</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">"PdfCategories"</span><span class="p">)</span>
                        <span class="p">.</span><span class="nf">TermsFacetFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Category</span><span class="p">,</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Type</span><span class="p">.</span><span class="nf">Match</span><span class="p">(</span><span class="s">"doc"</span><span class="p">),</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="s">"DocCategories"</span><span class="p">)</span>
                        <span class="p">.</span><span class="nf">GetResult</span><span class="p">();</span></code></pre></figure>

<p><span>and fetch the resulting facets:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">pdfTypeFacet</span> <span class="p">=</span> <span class="n">result</span><span class="p">.</span><span class="n">Facets</span><span class="p">[</span><span class="s">"PdfCategories"</span><span class="p">]</span> <span class="k">as</span> <span class="n">TermsFacet</span><span class="p">;</span>
<span class="n">docTypeFacet</span> <span class="p">=</span> <span class="n">result</span><span class="p">.</span><span class="n">Facets</span><span class="p">[</span><span class="s">"DocCategories"</span><span class="p">]</span> <span class="k">as</span> <span class="n">TermsFacet</span><span class="p">;</span></code></pre></figure>

<p><span>I hope you may find this useful when making your site awesome with EPiServer Find!</span></p>]]></content><author><name>Henrik Lindström</name><email>lindstrom.henrik@gmail.com</email></author><category term="EPiServer" /><category term="EPiServer" /><category term="EPiServer.Find" /><summary type="html"><![CDATA[Sometimes you want to have a facet calculated on just a subset of the result or have multiple facets each being calculated on a different subset of the result...]]></summary></entry><entry><title type="html">Integration tests with Protractor</title><link href="https://www.lindstromhenrik.com/integration-tests-with-protractor/" rel="alternate" type="text/html" title="Integration tests with Protractor" /><published>2014-05-21T00:00:00+02:00</published><updated>2014-05-21T00:00:00+02:00</updated><id>https://www.lindstromhenrik.com/integration-tests-with-protractor</id><content type="html" xml:base="https://www.lindstromhenrik.com/integration-tests-with-protractor/"><![CDATA[<p><span>After playing around with Protractor for a while I wanted to create some integration tests where I would bootstrap the entire server/database before each test to get a consistent state to start from in each test. The problem is that we often have to wait for everything to setup before running the tests. Using Jasmine as test framework the obvious solution for this would be to use the async callback in <strong>beforeEach</strong> do something like:</span></p>

<figure class="highlight"><pre><code class="language-coffeescript" data-lang="coffeescript"><span class="nx">beforeEach</span><span class="p">((</span><span class="nx">done</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="nx">server</span><span class="p">.</span><span class="na">start</span><span class="p">(()</span> <span class="o">-&gt;</span>
        <span class="nx">done</span><span class="p">()</span>
    <span class="p">)</span>
<span class="p">)</span></code></pre></figure>

<p><span>and <strong>server.start</strong>:</span></p>

<figure class="highlight"><pre><code class="language-coffeescript" data-lang="coffeescript"><span class="nx">start</span> <span class="o">=</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="nx">server</span> <span class="o">=</span> <span class="nx">spawn</span><span class="p">(</span><span class="s">'coffee'</span><span class="p">,</span> <span class="p">[</span> <span class="s">'server.coffee'</span> <span class="p">])</span>
    <span class="nx">server</span><span class="p">.</span><span class="na">stdout</span><span class="p">.</span><span class="na">on</span><span class="p">(</span><span class="s">'data'</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">-&gt;</span>
        <span class="k">if</span> <span class="nx">data</span><span class="p">.</span><span class="na">toString</span><span class="p">()</span> <span class="o">==</span> <span class="s">'App started</span><span class="se">\n</span><span class="s">'</span>
            <span class="nx">done</span><span class="p">()</span>
    <span class="p">)</span></code></pre></figure>

<p><span>Simply put, the server spawns a new process that starts our server using the command: <strong>‘coffee server.coffee’</strong> and then listen to stdout for the log output <strong>‘App started\n’</strong> and then issues the callback <strong>done</strong> (this is of course purely an example).</span></p>

<p><span>The problem is that Protractor overrides the async callback in <strong>beforeEach</strong> and never waits for our server to actually start. The reason is that Protractor helps you with handling all the async calls of WebdriverJS and creates its own <a href="https://github.com/angular/protractor/blob/master/docs/control-flow.md">control flow</a> using <a href="https://github.com/kriskowal/q">promises</a> that overrides Jasmines async callback. Instead of using the Jasmine async callback we need to make the <strong>server.start</strong> return a <strong>promise</strong> and then add that to the Protractor control flow.</span></p>

<p><span>First we need to import <strong>q</strong> (the Promise module) into our project using:</span></p>

<pre>
npm install q
</pre>

<p><span>Then we modify our <strong>server.start</strong> to return a promise instead of using the callback:</span></p>

<figure class="highlight"><pre><code class="language-coffeescript" data-lang="coffeescript"><span class="nx">Q</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s">'q'</span><span class="p">)</span>

<span class="nx">start</span> <span class="o">=</span> <span class="p">()</span> <span class="o">-&gt;</span>
    <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="na">defer</span><span class="p">()</span>
    <span class="nx">server</span> <span class="o">=</span> <span class="nx">spawn</span><span class="p">(</span><span class="s">'coffee'</span><span class="p">,</span> <span class="p">[</span> <span class="s">'server.coffee'</span> <span class="p">])</span>
    <span class="nx">server</span><span class="p">.</span><span class="na">stdout</span><span class="p">.</span><span class="na">on</span><span class="p">(</span><span class="s">'data'</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">-&gt;</span>
        <span class="k">if</span> <span class="nx">data</span><span class="p">.</span><span class="na">toString</span><span class="p">()</span> <span class="o">==</span> <span class="s">'App started</span><span class="se">\n</span><span class="s">'</span>
            <span class="nx">deferred</span><span class="p">.</span><span class="na">resolve</span><span class="p">()</span>
    <span class="p">)</span>

    <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="na">promise</span></code></pre></figure>

<p><span>Finally we add that to the Protractor control flow in the <strong>beforeEach</strong> function:</span></p>

<figure class="highlight"><pre><code class="language-coffeescript" data-lang="coffeescript"><span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">-&gt;</span>
    <span class="nx">protractor</span><span class="p">.</span><span class="na">promise</span><span class="p">.</span><span class="na">controlFlow</span><span class="p">().</span><span class="na">execute</span><span class="p">(()</span> <span class="o">-&gt;</span>
        <span class="k">return</span> <span class="nx">server</span><span class="p">.</span><span class="na">start</span><span class="p">()</span>
    <span class="p">)</span>
<span class="p">)</span></code></pre></figure>

<p><span>Voila! Now Protractor waits for our server to actually start before continuing with running the tests. Using this approach we can create integration tests that bootstraps the server before each test and completely isolates tests from each other enabling us to create better test scenarios that don’t depend on what order the tests are runned.</span></p>]]></content><author><name>Henrik Lindström</name><email>lindstrom.henrik@gmail.com</email></author><category term="angularjs" /><category term="angularjs" /><category term="testing" /><summary type="html"><![CDATA[After playing around with Protractor for a while I wanted to create some integration tests where I would bootstrap the entire server/database before each test to get a consistent state to start from in each test. The problem is that we often have to wait for everything to be setup before running the tests...]]></summary></entry><entry><title type="html">Using Protractor with CoffeeScript</title><link href="https://www.lindstromhenrik.com/using-protractor-with-coffescript/" rel="alternate" type="text/html" title="Using Protractor with CoffeeScript" /><published>2014-05-12T00:00:00+02:00</published><updated>2014-05-12T00:00:00+02:00</updated><id>https://www.lindstromhenrik.com/using-protractor-with-coffescript</id><content type="html" xml:base="https://www.lindstromhenrik.com/using-protractor-with-coffescript/"><![CDATA[<p><span>I’ve been playing around with AngularJS  for the last couple of weeks during my spare time while being on paternity leave (read: late at night). I really like the framework and last night I came across Protractor, the end to end testing framework, and for the first time I think I saw some light in the the UI-testing-tunnel and thought I should share some ideas in a couple of posts. First I’ll start with how to use Protractor with CoffeScript and how to get a nice fluent syntax in your testing scenarios (thanks to <a href="https://github.com/angular/protractor/issues/275#issuecomment-29106082">cyranix</a> for getting me inspired).</span></p>

<h2>Using Protractor with CoffeeScript</h2>

<p><span>I like using CoffeScript (even though I’m kind of verbose when I use it compared to most as I like keeping the parentheses) and thought it would be great if I could write my Page Objects as CoffeScript classes and chain the functions giving me a fluent syntax like:</span></p>

<figure class="highlight"><pre><code class="language-coffeescript" data-lang="coffeescript"><span class="nx">startPage</span><span class="p">.</span>
    <span class="p">.</span><span class="na">clickLogin</span><span class="p">()</span>
            <span class="p">.</span><span class="na">setUserName</span><span class="p">(</span><span class="s">'john.doe@acme.com'</span><span class="p">)</span>
            <span class="p">.</span><span class="na">setPassword</span><span class="p">(</span><span class="s">'donttellanyone'</span><span class="p">)</span>
            <span class="p">.</span><span class="na">submit</span><span class="p">()</span>
    <span class="nx">browser</span><span class="p">.</span><span class="na">waitForAngular</span><span class="p">()</span>
    
    <span class="nx">expect</span><span class="p">(</span><span class="nx">browser</span><span class="p">.</span><span class="na">getLocationAbsUrl</span><span class="p">()).</span><span class="na">toMatch</span><span class="p">(</span><span class="s">'/app/#!/dashboard'</span><span class="p">)</span></code></pre></figure>

<p><span>So, how do we do this? First we need to register CoffeScript in the protractor configuration to be able to use it in our scenarios:</span></p>

<p><span><strong>protractor-conf.js</strong></span></p>

<figure class="highlight"><pre><code class="language-coffeescript" data-lang="coffeescript"><span class="nx">exports</span><span class="p">.</span><span class="na">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">allScriptsTimeout</span><span class="o">:</span> <span class="mi">11000</span><span class="p">,</span>

    <span class="na">specs</span><span class="o">:</span> <span class="p">[</span>
        <span class="s">'e2e/*.scenarios.coffee'</span>
    <span class="p">],</span>

    <span class="na">capabilities</span><span class="o">:</span> <span class="p">{</span>
        <span class="s">'browserName'</span><span class="o">:</span> <span class="s">'chrome'</span>
    <span class="p">},</span>

    <span class="na">baseUrl</span><span class="o">:</span> <span class="s">'http://localhost:10000/app'</span><span class="p">,</span>

    <span class="na">framework</span><span class="o">:</span> <span class="s">'jasmine'</span><span class="p">,</span>

    <span class="na">jasmineNodeOpts</span><span class="o">:</span> <span class="p">{</span>
        <span class="na">defaultTimeoutInterval</span><span class="o">:</span> <span class="mi">30000</span>
    <span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<p><span>Note: If you don’t have CoffeScript installed grab it with:</span></p>

<pre>npm install coffee-script</pre>

<p><span>Next we need to create our Page Objects and we will start with the <strong>start page</strong>:</span></p>

<p><span><strong>start_page.coffee</strong></span></p>

<figure class="highlight"><pre><code class="language-coffeescript" data-lang="coffeescript"><span class="nx">LoginPage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s">'./login_page'</span><span class="p">)</span>

<span class="k">class</span> <span class="nx">StartPage</span>
    <span class="na">constructor</span><span class="o">:</span> <span class="o">-&gt;</span>
        <span class="vi">@</span><span class="na">loginLink</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">By</span><span class="p">.</span><span class="na">id</span><span class="p">(</span><span class="s">'loginLink'</span><span class="p">))</span>

    <span class="na">get</span><span class="o">:</span> <span class="o">-&gt;</span>
        <span class="nx">browser</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="s">'app/#!/'</span><span class="p">)</span>
        <span class="k">return</span> <span class="err">@</span>

    <span class="na">clickLogin</span><span class="o">:</span> <span class="o">-&gt;</span>
        <span class="vi">@</span><span class="na">loginLink</span><span class="p">.</span><span class="na">click</span><span class="p">()</span>
        <span class="nx">browser</span><span class="p">.</span><span class="na">waitForAngular</span><span class="p">()</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">LoginPage</span><span class="p">()</span>

<span class="nx">module</span><span class="p">.</span><span class="na">exports</span> <span class="o">=</span> <span class="nx">StartPage</span></code></pre></figure>

<p><span>We grab the login link element in the constructor (I’ve just set the id in the html view so that it is easy to get hold of in the tests and making the test a bit more robust if I decide to move the login link). When someone then clicks login we click the link and wait for angular to complete the request and then we return the Page Object for the <strong>login page</strong>.<span></span></span></p>

<p><span>The Page Object for the <strong>login page</strong> looks similar in structure but have a username and password field that the user can fill out (Here I use the <strong>By.model</strong> to get hold of the input fields for the username and password. Also note that I use return @ to return <strong>this</strong> in the functions to make it chainable):</span></p>

<p><span><strong>login_page.coffee</strong></span></p>

<figure class="highlight"><pre><code class="language-coffeescript" data-lang="coffeescript"><span class="nx">LoginPage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s">'./login_page'</span><span class="p">)</span>

<span class="k">class</span> <span class="nx">LoginPage</span>
    <span class="na">constructor</span><span class="o">:</span> <span class="o">-&gt;</span>
        <span class="vi">@</span><span class="na">username</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">By</span><span class="p">.</span><span class="na">model</span><span class="p">(</span><span class="s">'user.name'</span><span class="p">))</span>
        <span class="vi">@</span><span class="na">password</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">By</span><span class="p">.</span><span class="na">model</span><span class="p">(</span><span class="s">'user.password'</span><span class="p">))</span>
        <span class="vi">@</span><span class="na">loginButton</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">By</span><span class="p">.</span><span class="na">id</span><span class="p">(</span><span class="s">'loginButton'</span><span class="p">))</span>
        <span class="vi">@</span><span class="na">errorMessage</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">By</span><span class="p">.</span><span class="na">id</span><span class="p">(</span><span class="s">'loginErrorMessage'</span><span class="p">))</span>

    <span class="na">get</span><span class="o">:</span> <span class="o">-&gt;</span>
        <span class="nx">browser</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="s">'app/#!/auth/login'</span><span class="p">)</span>
        <span class="k">return</span> <span class="err">@</span>

    <span class="na">getErrorMessage</span><span class="o">:</span> <span class="o">-&gt;</span>
        <span class="k">return</span> <span class="vi">@</span><span class="na">errorMessage</span><span class="p">.</span><span class="na">getText</span><span class="p">()</span>

    <span class="na">setUserName</span><span class="o">:</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="o">-&gt;</span>
        <span class="vi">@</span><span class="na">username</span><span class="p">.</span><span class="na">sendKeys</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span>
        <span class="k">return</span> <span class="err">@</span>

    <span class="na">clearUserName</span><span class="o">:</span> <span class="o">-&gt;</span>
        <span class="vi">@</span><span class="na">username</span><span class="p">.</span><span class="na">clear</span><span class="p">()</span>
        <span class="k">return</span> <span class="err">@</span>

    <span class="na">setPassword</span><span class="o">:</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="o">-&gt;</span>
        <span class="vi">@</span><span class="na">password</span><span class="p">.</span><span class="na">sendKeys</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span>
        <span class="k">return</span> <span class="err">@</span>

    <span class="na">clearPassword</span><span class="o">:</span> <span class="o">-&gt;</span>
        <span class="vi">@</span><span class="na">password</span><span class="p">.</span><span class="na">clear</span><span class="p">()</span>
        <span class="k">return</span> <span class="err">@</span>

    <span class="na">submit</span><span class="o">:</span> <span class="o">-&gt;</span>
        <span class="vi">@</span><span class="na">loginButton</span><span class="p">.</span><span class="na">click</span><span class="p">()</span>

<span class="nx">module</span><span class="p">.</span><span class="na">exports</span> <span class="o">=</span> <span class="nx">LoginPage</span></code></pre></figure>

<p><span>Now we can simply <strong>require</strong> the <strong>start page</strong> Page Object in our scenarios to get the fluent syntax in our testing scenario:</span></p>

<p><span><strong>login.scenarios.coffee</strong></span></p>

<figure class="highlight"><pre><code class="language-coffeescript" data-lang="coffeescript"><span class="nx">StartPage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s">'../PageObjects/start_page'</span><span class="p">)</span>

<span class="nx">describe</span><span class="p">(</span><span class="s">'&lt;e2e&gt;'</span><span class="p">,</span> <span class="p">()</span> <span class="o">-&gt;</span>
    <span class="nx">loginPage</span> <span class="o">=</span> <span class="no">null</span>

    <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">-&gt;</span>
        <span class="nx">startPage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">StartPage</span><span class="p">()</span>
        <span class="nx">startPage</span><span class="p">.</span><span class="na">get</span><span class="p">()</span>
        <span class="nx">loginPage</span> <span class="o">=</span> <span class="nx">startPage</span><span class="p">.</span><span class="na">clickLogin</span><span class="p">()</span>
    <span class="p">)</span>

    <span class="nx">describe</span><span class="p">(</span><span class="s">'login'</span><span class="p">,</span> <span class="p">()</span> <span class="o">-&gt;</span>
        <span class="nx">it</span><span class="p">(</span><span class="s">'should login and redirect to the dashboard with valid user credentials'</span><span class="p">,</span> <span class="p">()</span> <span class="o">-&gt;</span>
            <span class="nx">loginPage</span>
                <span class="p">.</span><span class="na">setUserName</span><span class="p">(</span><span class="s">'john.doe@acme.com'</span><span class="p">)</span>
                <span class="p">.</span><span class="na">setPassword</span><span class="p">(</span><span class="s">'donttellanyone'</span><span class="p">)</span>
                <span class="p">.</span><span class="na">submit</span><span class="p">()</span>
            <span class="nx">browser</span><span class="p">.</span><span class="na">waitForAngular</span><span class="p">()</span>
            
            <span class="nx">expect</span><span class="p">(</span><span class="nx">browser</span><span class="p">.</span><span class="na">getLocationAbsUrl</span><span class="p">()).</span><span class="na">toMatch</span><span class="p">(</span><span class="s">'/app/#!/dashboard'</span><span class="p">)</span>
        <span class="p">)</span>

<span class="p">...</span><span class="na">more</span> <span class="nx">tests</span>
<span class="p">}</span></code></pre></figure>

<p><span>This way we get a nice structure and a pretty neat fluent syntax in our testing scenarios. Next up is how to bootstrap your server/database before each test scenario so that you can make integration test scenarios from a consistent state every time. I’ll get back to that in a future post.</span></p>]]></content><author><name>Henrik Lindström</name><email>lindstrom.henrik@gmail.com</email></author><category term="angularjs" /><category term="angularjs" /><category term="testing" /><summary type="html"><![CDATA[I’ve been playing around with AngularJS for the last couple of weeks during my spare time while being on paternity leave (read late at night). I really like the framework and last night I came across Protractor, the end to end testing framework, and for the first time I think I saw some light in the the UI-testing-tunnel and thought I should share some ideas in a couple of posts...]]></summary></entry><entry><title type="html">Language detection using Elasticsearch</title><link href="https://www.lindstromhenrik.com/language-detection-using-elasticsearch/" rel="alternate" type="text/html" title="Language detection using Elasticsearch" /><published>2013-10-30T00:00:00+01:00</published><updated>2013-10-30T00:00:00+01:00</updated><id>https://www.lindstromhenrik.com/language-detection-using-elasticsearch</id><content type="html" xml:base="https://www.lindstromhenrik.com/language-detection-using-elasticsearch/"><![CDATA[<p><span>A couple of weeks ago I had the privilege to speak at the Elasticsearch Meetup in Stockholm where I did show a slightly tweaked version of the ‘language categorizer’ I did write about a couple of months ago and would like to share the changes I did (the naive approach wasn’t  accurate enough to be presented live in public ;-)).</span></p>

<p><span>First, instead of using the default mapping for the ‘text’ field we use the nGram-tokenizer where we specify that we want to index all 2 and 3 letter ngrams of the text. Every language basically have different frequencies for each letter sequence and we want to find the language not by the words in the query but by how common the letter sequences are (as an example ‘th’ is very common in english but rare in swedish). This way we will actually be able to detect the language for a word sequence even if we haven’t actually seen any of the words in the training set. So, we extend our mappings to use the nGram-tokenizer:</span></p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="nl">"settings"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"analysis"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"analyzer"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"ngram_analyzer"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"tokenizer"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"ngram_tokenizer"</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"tokenizer"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"ngram_tokenizer"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"nGram"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"min_gram"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"2"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"max_gram"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"3"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"token_chars"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"letter"</span><span class="p">,</span><span class="w"> </span><span class="s2">"digit"</span><span class="w"> </span><span class="p">]</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"mappings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"_parent"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"category"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"string"</span><span class="p">,</span><span class="w"> 
                    </span><span class="nl">"analyzer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ngram_analyzer"</span><span class="w">                
                </span><span class="p">}</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p><span>When querying we then want to calculate the average score for each language using the has_child query but we don’t want the query to filter out any hits but rather return a 0-score for a document that doesn’t match (i.e. we don’t want the score for one language to be based on maybe one tenth of all documents for that language and the score for another to be based on half of the documents for that language). To do this we use the ‘boosting’ query where we simply give a boost to all documents matching the query:</span></p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
  </span><span class="nl">"query"</span><span class="p">:{</span><span class="w">
    </span><span class="nl">"has_child"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"data"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"score_type"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"avg"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"query"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"boosting"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"positive"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"match"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                  </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"skriver en bok"</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"negative"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
               </span><span class="nl">"match_all"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">}</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"negative_boost"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p><span>Using these simple ‘tweaks’ we have actually created a very accurate language detector. If you want to give it a try you can create training sets from the <a href="http://corpora.uni-leipzig.de">Leipzig Corpora Collection</a> for the different languages you want to detect.</span></p>]]></content><author><name>Henrik Lindström</name><email>lindstrom.henrik@gmail.com</email></author><category term="elasticsearch" /><category term="elasticsearch" /><summary type="html"><![CDATA[A couple of weeks ago I had the privilege to speak at the Elasticsearch Meetup in Stockholm where I did show a slightly tweaked version of the 'language categorizer' I did write about a couple of months ago and would like to share the changes I did (the naive approach wasn’t accurate enough to be presented live in public ;-))...]]></summary></entry><entry><title type="html">Indexing only referenced VPP-files with EPiServer Find</title><link href="https://www.lindstromhenrik.com/indexing-only-referenced-vpp-files-with-episerver-find/" rel="alternate" type="text/html" title="Indexing only referenced VPP-files with EPiServer Find" /><published>2013-05-02T00:00:00+02:00</published><updated>2013-05-02T00:00:00+02:00</updated><id>https://www.lindstromhenrik.com/indexing-only-referenced-vpp-files-with-episerver-find</id><content type="html" xml:base="https://www.lindstromhenrik.com/indexing-only-referenced-vpp-files-with-episerver-find/"><![CDATA[<p><span>The EPiServer Find CMS integration does not index any files stored in the VPP by default. A convention is included in the integration that index files visible in the file manager and it is enabled by setting the VisibleInFilemanagerVPPIndexingConvention on the FilieIndexer conventions:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">FileIndexer</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Conventions</span><span class="p">.</span><span class="n">ShouldIndexVPPConvention</span> 
  <span class="p">=</span> <span class="k">new</span> <span class="nf">VisibleInFilemanagerVPPIndexingConvention</span><span class="p">();</span></code></pre></figure>

<p><span>However, this convention can be a little bit aggressive. As soon as an editor adds a file it is searchable and even though no access control mechanism are overruled some might think it is hidden until it is actually used on the site. So how do we proceed to achieve this?</span></p>

<p><span>Built in into the CMS there is the ContentSoftLinkRepository where we can query if files (or any IContent for that matter) is linked from within another IContent. By using this we can then create a file indexing convention that checks if the file is linked from some indexed IContent and if so we index it:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">FileIndexer</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Conventions</span><span class="p">.</span><span class="n">ForInstancesOf</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">UnifiedFile</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;().</span><span class="nf">ShouldIndex</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">contentRepository</span> <span class="p">=</span> 
        <span class="n">ServiceLocation</span><span class="p">.</span><span class="n">ServiceLocator</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">GetInstance</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">IContentRepository</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>
    <span class="kt">var</span> <span class="n">contentSoftLinkRepository</span> <span class="p">=</span> 
        <span class="n">ServiceLocation</span><span class="p">.</span><span class="n">ServiceLocator</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">GetInstance</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">ContentSoftLinkRepository</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>
    <span class="kt">var</span> <span class="n">softLinks</span> <span class="p">=</span> <span class="n">contentSoftLinkRepository</span><span class="p">.</span><span class="nf">Load</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">VirtualPath</span><span class="p">);</span>

    <span class="k">try</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">softLink</span> <span class="k">in</span> <span class="n">softLinks</span><span class="p">)</span>
        <span class="p">{</span>
            
            <span class="k">if</span> <span class="p">(</span><span class="n">softLink</span><span class="p">.</span><span class="n">SoftLinkType</span> <span class="p">==</span> <span class="n">ReferenceType</span><span class="p">.</span><span class="n">ExternalReference</span> <span class="p">||</span>
                <span class="n">softLink</span><span class="p">.</span><span class="n">SoftLinkType</span> <span class="p">==</span> <span class="n">ReferenceType</span><span class="p">.</span><span class="n">ImageReference</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">content</span> <span class="p">=</span> 
                    <span class="n">contentRepository</span><span class="p">.</span><span class="n">Get</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">IContent</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">softLink</span><span class="p">.</span><span class="n">OwnerContentLink</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(!</span><span class="n">ContentIndexer</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Conventions</span><span class="p">.</span><span class="n">ShouldIndexConvention</span><span class="p">.</span><span class="nf">ShouldIndex</span><span class="p">(</span><span class="n">content</span><span class="p">).</span><span class="n">Value</span><span class="p">)</span> <span class="c1">// don't index referenced file if content is marked as not indexed
</span>
                <span class="p">{</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="c1">// only index if content is published
</span>
                <span class="kt">var</span> <span class="n">publicationStatus</span> <span class="p">=</span> 
                    <span class="n">content</span><span class="p">.</span><span class="nf">PublishedInLanguage</span><span class="p">()[</span><span class="n">softLink</span><span class="p">.</span><span class="n">OwnerLanguage</span><span class="p">.</span><span class="n">Name</span><span class="p">];</span>

                <span class="k">if</span> <span class="p">(</span><span class="n">publicationStatus</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;&amp;</span><span class="n">amp</span><span class="p">;</span>
                    <span class="p">(</span><span class="n">publicationStatus</span><span class="p">.</span><span class="n">StartPublish</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span>
                     <span class="n">publicationStatus</span><span class="p">.</span><span class="n">StartPublish</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">)</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;&amp;</span><span class="n">amp</span><span class="p">;</span>
                    <span class="p">(</span><span class="n">publicationStatus</span><span class="p">.</span><span class="n">StopPublish</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span>
                     <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">publicationStatus</span><span class="p">.</span><span class="n">StopPublish</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">catch</span>
    <span class="p">{</span>
        <span class="c1">// ooops something went wrong. Better not index this one ;-)
</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
<span class="p">});</span></code></pre></figure>

<p><span>Using this convention only files that are referenced from an indexed IContent, that also is published (as by default also unpublished IContent is indexed to provide better querying in editor mode).</span></p>

<p><span>I hope you may find this useful when making your site awesome with EPiServer Find!</span></p>]]></content><author><name>Henrik Lindström</name><email>lindstrom.henrik@gmail.com</email></author><category term="EPiServer" /><category term="EPiServer" /><category term="EPiServer.Find" /><summary type="html"><![CDATA[The EPiServer Find CMS integration does not index any files stored in the VPP by default. A convention is included in the integration that index files visible in the file manager and it is enabled by setting the VisibleInFilemanagerVPPIndexingConvention on the FilieIndexer conventions...]]></summary></entry><entry><title type="html">Nested filtering with EPiServer Find</title><link href="https://www.lindstromhenrik.com/nested-filtering-with-episerver-find/" rel="alternate" type="text/html" title="Nested filtering with EPiServer Find" /><published>2013-03-15T00:00:00+01:00</published><updated>2013-03-15T00:00:00+01:00</updated><id>https://www.lindstromhenrik.com/nested-filtering-with-episerver-find</id><content type="html" xml:base="https://www.lindstromhenrik.com/nested-filtering-with-episerver-find/"><![CDATA[<p><span>Some have already noticed one of the x2find mebers, <a href="https://github.com/x2find/Nested2Find">Nested2Find</a>, that enables nested object mappings and filtering to the EPiServer Find API. I would like to give a short description of what it does and how it can help you in some filtering scenarios.</span></p>

<p><span>Sometimes we need to be able to filter documents based on matching a specific object in a lists of complex objects on the document. Say for instance that we have documents that have a list of all authors that have contributed. Authors that all have a set of properties such as name and address. We then want to find all documents where one of the authors match a specific set of criterias, say all documents that have a swedish author named Henrik. This is what Nested2Find enables you to do. It lets you define nested lists of complex objects on a document for which you then later can specify a matching criteria when querying.</span></p>

<h2>How to use the Nested2Find extension</h2>

<p><span>Add the nested conventions to the conventions:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">client</span><span class="p">.</span><span class="n">Conventions</span><span class="p">.</span><span class="nf">AddNestedConventions</span><span class="p">();</span></code></pre></figure>

<p><span>Create an object containing a NestedList&lt;&gt; of objects (NestedList&lt;&gt; is simply a typed List&lt;&gt;):</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Document</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">Document</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Authors</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NestedList</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Author</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Title</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">NestedList</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Author</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Authors</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Body</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Author</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Country</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><span>Index and start filtering:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">result</span> <span class="p">=</span> <span class="n">client</span><span class="p">.</span><span class="n">Search</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Document</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;()</span>
             <span class="p">.</span><span class="nf">Filter</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Authors</span><span class="p">,</span> <span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="nf">Match</span><span class="p">(</span><span class="s">"Henrik"</span><span class="p">)</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="p">.</span><span class="n">Country</span><span class="p">.</span><span class="nf">Match</span><span class="p">(</span><span class="s">"Sweden"</span><span class="p">))</span>
             <span class="p">.</span><span class="nf">GetResult</span><span class="p">();</span></code></pre></figure>

<p><span>or:<span></span></span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">result</span> <span class="p">=</span> <span class="n">client</span><span class="p">.</span><span class="n">Search</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Document</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;()</span>
            <span class="p">.</span><span class="nf">Filter</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Authors</span><span class="p">.</span><span class="nf">MatchItem</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">FirstName</span><span class="p">.</span><span class="nf">Match</span><span class="p">(</span><span class="s">"Henrik"</span><span class="p">)</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="p">.</span><span class="n">Country</span><span class="p">.</span><span class="nf">Match</span><span class="p">(</span><span class="s">"Sweden"</span><span class="p">)))</span>
            <span class="p">.</span><span class="nf">GetResult</span><span class="p">();</span></code></pre></figure>

<sapn>I hope you may find this useful when making your site awesome with EPiServer Find!&lt;/span&gt;
</sapn>]]></content><author><name>Henrik Lindström</name><email>lindstrom.henrik@gmail.com</email></author><category term="EPiServer" /><category term="EPiServer" /><category term="EPiServer.Find" /><summary type="html"><![CDATA[Some have already noticed one of the x2find mebers, Nested2Find, that enables nested object mappings and filtering to the EPiServer Find API. I would like to give a short description of what it does and how it can help you in some filtering scenarios...]]></summary></entry><entry><title type="html">Categorizing using Elasticsearch</title><link href="https://www.lindstromhenrik.com/categorizing-using-elasticsearch/" rel="alternate" type="text/html" title="Categorizing using Elasticsearch" /><published>2013-03-08T00:00:00+01:00</published><updated>2013-03-08T00:00:00+01:00</updated><id>https://www.lindstromhenrik.com/categorizing-using-elasticsearch</id><content type="html" xml:base="https://www.lindstromhenrik.com/categorizing-using-elasticsearch/"><![CDATA[<p><span>I’m fortunate to work at a company that once a month have a ‘hack day’ when we are allowed to just try out new and crazy ideas. As an advocate of using search for so much more than just the ‘search page’ I decided to do a small demo of how to use Elasticsearch to do categorization and I wanted to share some of my ideas.</span></p>

<h2>The approach</h2>
<p><span>We often have a large amount of data that we know falls into different categories and that we can use as a sample space for predicting unseen data. If we index all this data that we have and look at the unseen data as ‘queries’ we should be able to construct queries where the score when querying the known data space represent a similarity between the ‘objects’. However, now that we have a result where each ‘object’ in the result has a similarity score with the ‘queried’ object how should we interpret it? What if we group all items in the results by each category that we know that they fall into and then calculate the avg similarity score within that group and return the category for which the avg score is the highest? Depending on your data and problem space constructing the similarity query might be more or less easy but the beauty of this approach is that is very easy to implement in Elasticsearch using parent-child mappings.</span></p>

<h2>Demo: Implementing a language categorizer</h2>
<p><span>We start by creating an index (I’ve named it ‘myindex’) and add a parent mapping between a category type and a data type:</span></p>

<figure class="highlight"><pre><code class="language-json-doc" data-lang="json-doc"><span class="na">http</span><span class="p">:</span><span class="c1">//localhost:9200/myindex
</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"mappings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"_parent"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"category"</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p><span>Then we add the known categories:</span></p>

<figure class="highlight"><pre><code class="language-json-doc" data-lang="json-doc"><span class="na">http</span><span class="p">:</span><span class="c1">//localhost:9200/myindex/category/sv
</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Swedish"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="c1">...</span></code></pre></figure>

<p><span>For the ‘known’ data we index it and relate it to the parent category:</span></p>

<figure class="highlight"><pre><code class="language-json-doc" data-lang="json-doc"><span class="na">http</span><span class="p">:</span><span class="c1">//localhost:9200/myindex/data/1?parent=sv
</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"det här är en text skriven på svenska"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="c1">...</span></code></pre></figure>

<p><span>Using the has_child-query we can then easily achieve the described approach of searching for categories and have them returned based on the avg score of a child-query issued on the data. (In this case we just do a simple query_string-query with the text we want do do language detection for, ‘en svensk text’):</span></p>

<figure class="highlight"><pre><code class="language-json-doc" data-lang="json-doc"><span class="na">http</span><span class="p">:</span><span class="c1">//localhost:9200/myindex/category/_search
</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"query"</span><span class="p">:{</span><span class="w">
    </span><span class="nl">"has_child"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"data"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"score_type"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"avg"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"query"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"query_string"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"query"</span><span class="p">:</span><span class="w"> </span><span class="s2">"en svensk text"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p><span>Resulting in:</span></p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="nl">"took"</span><span class="p">:</span><span class="w"> </span><span class="mi">27</span><span class="p">,</span><span class="w">
    </span><span class="nl">"timed_out"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"_shards"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"total"</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w">
        </span><span class="nl">"successful"</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w">
        </span><span class="nl">"failed"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"hits"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"total"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
        </span><span class="nl">"max_score"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.3125</span><span class="p">,</span><span class="w">
        </span><span class="nl">"hits"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"_index"</span><span class="p">:</span><span class="w"> </span><span class="s2">"myindex"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"_type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"category"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"sv"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"_score"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.3125</span><span class="p">,</span><span class="w">
                </span><span class="nl">"_source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Swedish"</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p><span>Voila! In just 4 steps you know have your very own language detector.</span></p>

<h2>Discussion</h2>
<p><span>The described language detector might be a bit simplistic but can easily be more advanced by adding more advanced analyzers for your indexed data using stemmers or alike for the appropriate language. However the approach can be tweaked to do much more advanced queries on more complex objects using all the fancy query types available in Elasticsearch (just ignore the ConstantScore-query ;-)). Only your imagination stops you from creating appropriate similarity queries that might give you really good results in just a few easy steps!</span></p>

<p><span>So stop looking at your ‘search engine’ as a search page provider and see it as a great tool for not just querying but also a great source for analyzing your data!</span></p>

<h3>Note:</h3>
<p><span>The Elasticsearch0.20.x releases have a bug in the has_child-query calculating the sum and not the avg score when using the score_type=avg. I’ve issued a <a href="https://github.com/elasticsearch/elasticsearch/pull/2747">pull request</a> but if you want to try it out you can clone and build from the master branch where the upgraded Lucene distribution circumvents the problem.</span></p>]]></content><author><name>Henrik Lindström</name><email>lindstrom.henrik@gmail.com</email></author><category term="elasticsearch" /><category term="elasticsearch" /><summary type="html"><![CDATA[I'm fortunate to work at a company that once a month have a 'hack day' when we are allowed to just try out new and crazy ideas. As an advocate of using search for so much more than just the 'search page' I decided to do a small demo of how to use Elasticsearch to do categorization and I wanted to share some of my ideas...]]></summary></entry><entry><title type="html">Hierarchical faceting with EPiServer Find</title><link href="https://www.lindstromhenrik.com/hierarchical-faceting-with-episerver-find/" rel="alternate" type="text/html" title="Hierarchical faceting with EPiServer Find" /><published>2013-02-26T00:00:00+01:00</published><updated>2013-02-26T00:00:00+01:00</updated><id>https://www.lindstromhenrik.com/hierarchical-faceting-with-episerver-find</id><content type="html" xml:base="https://www.lindstromhenrik.com/hierarchical-faceting-with-episerver-find/"><![CDATA[<p><span>A quite common use case for facets is to show a listing of the number of documents in a result for the different categories on the site (quite common is maybe an understatement as this is often the “hello world!” of faceting). A document can occur in maybe one or more categories and this is where your search index really stands out since it doesn’t care if you have one or two categories associated with the document it will return your facet in no time anyway. Sometimes your categories have a hierarchical structure that you want to reflect in your facet. Lets say that you have documents about cars and want to have a category tree based on manufacturer and name, ie. Volvo/XC60. How can you achieve a facet where you get an aggregated count for each level in the category tree? For example:</span></p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="s">Volkswagen (7)</span>
    <span class="s">Passat (5)</span>
    <span class="s">Tiguan (2)</span>
<span class="s">Volvo (10)</span>
    <span class="s">V70 (5)</span>
    <span class="s">V60 (2)</span>
    <span class="s">…</span></code></pre></figure>

<p><span>The simplest way of doing this is by associating each document with all levels for each of its categories. Then by using a terms facet when fetching your result you will get an aggregated count for each node in your category tree. Voila, there is your hierarchical facet but with just a few lines of code you can get Find to do all that dirty work of your hands and all you have to do is to pass a category string (each level separated by a ‘/’) and return a facet that parse the result and reflects the nested structure of the category tree. I will leave out the implementation details but at <a href="https://github.com/x2find/HierarchicalFacet2Find">HierarchicalFacet2Find</a> you can fetch your own copy of the code that does that work for you.</span></p>

<h2>How to use the HierarchicalFacet2Find extension</h2>

<p><span>Add a Hierarchy property to the document:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Document</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">Id</span><span class="p">]</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="n">Hierarchy</span> <span class="n">Hierarchy</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><span>Set the hierarchy path:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">document</span><span class="p">.</span><span class="n">Hierarchy</span> <span class="p">=</span> <span class="s">"A/B/C/D"</span><span class="p">;</span></code></pre></figure>

<p><span>Index and request a HierarchicalFacet when searching:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">result</span> <span class="p">=</span> <span class="n">client</span><span class="p">.</span><span class="n">Search</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Document</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;()</span>
            <span class="p">.</span><span class="nf">HierarchicalFacetFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Hierarchy</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">GetResult</span><span class="p">();</span></code></pre></figure>

<p><span>Fetch it from the result:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">facet</span> <span class="p">=</span> <span class="n">result</span><span class="p">.</span><span class="nf">HierarchicalFacetFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Hierarchy</span><span class="p">)</span></code></pre></figure>

<p><span>Loop over the nested hierarchy paths:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">hierarchyPath</span> <span class="k">in</span> <span class="n">facet</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">hierarchyPath</span><span class="p">.</span><span class="n">Path</span><span class="p">;</span>
    <span class="n">hierarchyPath</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">subHierarchyPath</span> <span class="k">in</span> <span class="n">hierarchyPath</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">subHierarchyPath</span><span class="p">.</span><span class="n">Path</span><span class="p">;</span>
        <span class="n">subHierarchyPath</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span>
        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><span>I hope you may find this useful when making your site awesome with EPiServer Find!</span></p>]]></content><author><name>Henrik Lindström</name><email>lindstrom.henrik@gmail.com</email></author><category term="EPiServer" /><category term="EPiServer" /><category term="EPiServer.Find" /><summary type="html"><![CDATA[A quite common use case of facets is to show a listing of the number of documents in a result for the different categories on the site (quite common is maybe an understatement as this is often the "hello world!" of faceting). A document can occur in maybe one or more categories and this is where your search index really stands out since it doesn’t care if you have one or two categories associated with the document it will return your facet in no time anyway. Sometimes your categories have a hierarchical structure that you want to reflect in your facet...]]></summary></entry><entry><title type="html">Time to live with EPiServer Find</title><link href="https://www.lindstromhenrik.com/time-to-live-with-episerver-find/" rel="alternate" type="text/html" title="Time to live with EPiServer Find" /><published>2013-02-15T00:00:00+01:00</published><updated>2013-02-15T00:00:00+01:00</updated><id>https://www.lindstromhenrik.com/time-to-live-with-episerver-find</id><content type="html" xml:base="https://www.lindstromhenrik.com/time-to-live-with-episerver-find/"><![CDATA[<p><span>The latest release of EPiServer Find contains, apart for a number of bug fixes, one new feature and that is the ability to set a time to live-value on indexed documents. The value is expressed as a TimeSpan and specifies how long the document should reside in the index before it is automatically deleted. This can be really useful if you index documents continuously (say that you index all items that users currently are looking at on your site) but only what to show the latest (i.e. what users are currently looking at on the site) and don’t want to flood your index over time (i.e I don’t care what someone looked at yesterday). Under these circumstances the time to live-feature can really help you by doing that dirty cleanup job that we all hate to to do.</span></p>

<h2>How to use time to live</h2>

<p><span>Given an object with a TimeToLive property (or TimeSpan):</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">WithTimeToLive</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">Id</span><span class="p">]</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="n">TimeToLive</span> <span class="n">TimeToLive</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><span>We first need to configure the client and register the TimeToLive-property for the given object type:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">client</span><span class="p">.</span><span class="n">Conventions</span><span class="p">.</span><span class="n">ForInstancesOf</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">WithTimeToLive</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;()</span>
    <span class="p">.</span><span class="nf">TimeToLiveIs</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">TimeToLive</span><span class="p">);</span></code></pre></figure>

<p><span>When indexing an object we simply register a TimeSpan value to the property specifying how long it should reside in the index:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">indexObject</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">WithTimeToLive</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Id</span> <span class="p">=</span> <span class="s">"123"</span><span class="p">,</span>
        <span class="n">TimeToLive</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TimeSpan</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
    <span class="p">};</span></code></pre></figure>

<p><span>I hope you may find this useful when making your site awesome with EPiServer Find!</span></p>

<h3>Note:</h3>

<p><span>The granularity of time to live is 60 seconds meaning that the documents will be deleted within 60 seconds of the actual time to live.</span></p>

<h3>Updated:</h3>
<p><span>Instead of configuring the TimeToLive-property by the conventions it can be annotated by the TimeToLiveAttribute:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">WithTimeToLive</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">Id</span><span class="p">]</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    
    <span class="p">[</span><span class="n">TimeToLive</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">TimeToLive</span> <span class="n">TimeToLive</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><span>or passed in the index call:</span></p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">client</span><span class="p">.</span><span class="nf">Index</span><span class="p">(</span><span class="n">indexObjext</span><span class="p">,</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">TimeToLive</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TimeSpan</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">0</span><span class="p">));</span></code></pre></figure>]]></content><author><name>Henrik Lindström</name><email>lindstrom.henrik@gmail.com</email></author><category term="EPiServer" /><category term="EPiServer" /><category term="EPiServer.Find" /><summary type="html"><![CDATA[The latest release of EPiServer Find contains, apart for a number of bug fixes, one new feature and that is the ability to set a time to live value on indexed documents. The value is expressed as a TimeSpan and specifies how long the document should reside in the index before it is automatically deleted. This can be really useful if you index documents continuously (say that you index all items that users currently are looking at on your site) but only what to show the latest (i.e. what users are currently looking at on the site) and don’t want to flood your index over time (i.e I don’t care what someone looked at yesterday). Under these circumstances the time to live-feature can really help you by doing that dirty cleanup job that we all hate to to do...]]></summary></entry></feed>